import{_ as l,c as e,a as i,o as h}from"./app-C6qutNXP.js";const n={};function s(t,a){return h(),e("div",null,a[0]||(a[0]=[i('<h1 id="_2-数据的表示" tabindex="-1"><a class="header-anchor" href="#_2-数据的表示"><span>2 数据的表示</span></a></h1><h2 id="_2-1-数值数据的表示" tabindex="-1"><a class="header-anchor" href="#_2-1-数值数据的表示"><span>2.1 数值数据的表示</span></a></h2><p>数值数据表示的三要素</p><ul><li>进位记数制：十进制、二进制、八进制</li><li>定、浮点表示：</li><li>二进制编码：原码、反码、补码</li></ul><p>数值数据的表示</p><ul><li>带后缀</li></ul><p>带符号数的表示</p><p>零的机器数</p><ul><li>原码表示+0-0</li><li>补码+0=-0=0000</li></ul><p>补码能表示的数比原码/反码多一个</p><ul><li>已知机器字长，则机器数的位数</li></ul><h2 id="_2-2-数值表示法" tabindex="-1"><a class="header-anchor" href="#_2-2-数值表示法"><span>2.2 数值表示法</span></a></h2><h3 id="定点表示法" tabindex="-1"><a class="header-anchor" href="#定点表示法"><span>定点表示法</span></a></h3><ul><li><p>定点小数 表示范围（会考） 若机器字长有n+1位，</p></li><li><p>定点整数</p></li></ul><h3 id="浮点表示法" tabindex="-1"><a class="header-anchor" href="#浮点表示法"><span>浮点表示法</span></a></h3><p>尾数，小数，-1~1之间</p><h3 id="浮点数的规格化表示-考" tabindex="-1"><a class="header-anchor" href="#浮点数的规格化表示-考"><span>浮点数的规格化表示（考）</span></a></h3><ul><li>尾数的最高数位必须是一个有效值 1/r &lt;= |M| &lt; 1 结论：</li></ul><p>(8.75)10 = (1000.11 x 2^0)2 = (0.100011 x 2^4)</p><h4 id="浮点数的表示范围-背" tabindex="-1"><a class="header-anchor" href="#浮点数的表示范围-背"><span>浮点数的表示范围（背）：</span></a></h4><p>最大正数、绝对值最大负数、最小正数、规格化的最小负数</p><table><thead><tr><th>阶码↑</th><th>正↑</th><th>负↓</th></tr></thead><tbody><tr><td>尾数↑</td><td>正↑</td><td>负↑</td></tr></tbody></table><h4 id="浮点数阶码的移码表示法" tabindex="-1"><a class="header-anchor" href="#浮点数阶码的移码表示法"><span>浮点数阶码的移码表示法</span></a></h4><p>[]</p><h3 id="偏置值位2-n的移码的特点" tabindex="-1"><a class="header-anchor" href="#偏置值位2-n的移码的特点"><span>偏置值位2^n的移码的特点：</span></a></h3><h4 id="ieee754标准浮点数" tabindex="-1"><a class="header-anchor" href="#ieee754标准浮点数"><span>IEEE754标准浮点数</span></a></h4><p>3种形式的浮点数（数码-阶数-尾数-总位数-偏置值）：</p><ol><li>短浮点数 1-8-23</li><li>长浮点数 1-11-52</li><li>临时浮点数 1-15-64</li></ol><h2 id="_2-3-非数值数据的表示" tabindex="-1"><a class="header-anchor" href="#_2-3-非数值数据的表示"><span>2.3 非数值数据的表示</span></a></h2><h2 id="_2-4-十进制数和数串的表示-自学" tabindex="-1"><a class="header-anchor" href="#_2-4-十进制数和数串的表示-自学"><span>2.4 十进制数和数串的表示（自学）</span></a></h2><h2 id="_2-5-不同类型的数据表示举例-自学" tabindex="-1"><a class="header-anchor" href="#_2-5-不同类型的数据表示举例-自学"><span>2.5 不同类型的数据表示举例（自学）</span></a></h2><p>十进制-&gt;短浮点数 (100.25)10 -&gt; (1100100.01)2 1100100.01 = 1.10010001x2^6 1111111+110 = 10000101 符号数 0, 阶码 10000101 尾数 10010001000000000000000 短浮点数： 42C88000H</p><h4 id="非数值数据的表示与存放" tabindex="-1"><a class="header-anchor" href="#非数值数据的表示与存放"><span>非数值数据的表示与存放</span></a></h4><ol><li>ASCII码字符编码</li><li>汉字输入码</li><li>汉字内码</li><li>汉字字形码</li></ol><h2 id="_2-6-数据校验码" tabindex="-1"><a class="header-anchor" href="#_2-6-数据校验码"><span>2.6 数据校验码</span></a></h2><h4 id="数据校验码-选择填空" tabindex="-1"><a class="header-anchor" href="#数据校验码-选择填空"><span>数据校验码（选择填空）</span></a></h4><p>检错纠错编码：能自动纠错的数据编码 编码的最小距离： 公式: L-1 = D+C(D&gt;=C) L:编码的最小距离 D:检错的位数 C:纠错的位数</p><h4 id="奇偶校验码" tabindex="-1"><a class="header-anchor" href="#奇偶校验码"><span>奇偶校验码</span></a></h4><p>最简单的数据校验码：可以检测出1位</p><p>奇校验-1的个数是奇数 偶校验-1的个数是偶数</p><ol start="3"><li>交叉奇偶校验</li></ol><h4 id="定点数计算" tabindex="-1"><a class="header-anchor" href="#定点数计算"><span>定点数计算：</span></a></h4><p>[X+Y]补 = [X]补 + [Y]补 [X-Y]补 = [X]补 + [-Y]补 补码计算的溢出： 溢出检测：</p><ol><li>采用一个符号位</li><li>采用进位位</li><li>双符号位溢出判断</li></ol><h4 id="浮点数计算" tabindex="-1"><a class="header-anchor" href="#浮点数计算"><span>浮点数计算:</span></a></h4><h4 id="运算器设计基础" tabindex="-1"><a class="header-anchor" href="#运算器设计基础"><span>运算器设计基础：</span></a></h4><h4 id="n位加法器的实现" tabindex="-1"><a class="header-anchor" href="#n位加法器的实现"><span>n位加法器的实现</span></a></h4><ul><li>基本加法器： 串行：1位全加器 并行：多个全加器 Gi和Pi只跟A和B（输入）有关？？</li></ul><p>串行加法器：最长延迟时间2nty</p><p>超前进位加法器 CLA： 每个进位都不需要等待低位</p><ol><li>单级先行进位方式：组内并行、组间串行</li><li>多级先行进位方式：组内并行、组间并行</li></ol><h4 id="定点乘法运算" tabindex="-1"><a class="header-anchor" href="#定点乘法运算"><span>定点乘法运算</span></a></h4><h4 id="补码一位乘法-booth乘法" tabindex="-1"><a class="header-anchor" href="#补码一位乘法-booth乘法"><span>补码一位乘法：Booth乘法</span></a></h4><p>乘法运算需要3个寄存器 A:部分积与最后乘积的高位部分，初值=0 B:被乘数 C:乘数</p><p>乘法规则：</p><ol><li>参加运算的数用补码表示</li><li>符号位参加运算</li><li>乘数最低位后面增加一位附加位Yn+1,</li><li>...</li><li>...</li><li>...</li></ol>',56)]))}const d=l(n,[["render",s],["__file","2_数据的表示.html.vue"]]),p=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/2_%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA.html","title":"2 数据的表示","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"2.1 数值数据的表示","slug":"_2-1-数值数据的表示","link":"#_2-1-数值数据的表示","children":[]},{"level":2,"title":"2.2 数值表示法","slug":"_2-2-数值表示法","link":"#_2-2-数值表示法","children":[{"level":3,"title":"定点表示法","slug":"定点表示法","link":"#定点表示法","children":[]},{"level":3,"title":"浮点表示法","slug":"浮点表示法","link":"#浮点表示法","children":[]},{"level":3,"title":"浮点数的规格化表示（考）","slug":"浮点数的规格化表示-考","link":"#浮点数的规格化表示-考","children":[]},{"level":3,"title":"偏置值位2^n的移码的特点：","slug":"偏置值位2-n的移码的特点","link":"#偏置值位2-n的移码的特点","children":[]}]},{"level":2,"title":"2.3 非数值数据的表示","slug":"_2-3-非数值数据的表示","link":"#_2-3-非数值数据的表示","children":[]},{"level":2,"title":"2.4 十进制数和数串的表示（自学）","slug":"_2-4-十进制数和数串的表示-自学","link":"#_2-4-十进制数和数串的表示-自学","children":[]},{"level":2,"title":"2.5 不同类型的数据表示举例（自学）","slug":"_2-5-不同类型的数据表示举例-自学","link":"#_2-5-不同类型的数据表示举例-自学","children":[]},{"level":2,"title":"2.6 数据校验码","slug":"_2-6-数据校验码","link":"#_2-6-数据校验码","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"计算机组成原理/2_数据的表示.md"}');export{d as comp,p as data};
