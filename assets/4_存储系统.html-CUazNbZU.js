import{_ as a,c as e,a as i,o as h}from"./app-C6qutNXP.js";const c={};function n(s,l){return h(),e("div",null,l[0]||(l[0]=[i('<h1 id="_4-存储系统" tabindex="-1"><a class="header-anchor" href="#_4-存储系统"><span>4 存储系统</span></a></h1><p>存储容量、存储速度和价格的矛盾 Cache寄存器&gt;SRAM&gt;DRAM主存&gt;Disk硬盘&gt;</p><h2 id="存储访问的局部性原理" tabindex="-1"><a class="header-anchor" href="#存储访问的局部性原理"><span>存储访问的局部性原理</span></a></h2><p>存取指令/存取数据所访问的存储单元都趋近于聚集在较小的连续单元区域</p><ul><li>时间局部性：（顺序存储）</li><li>空间局部性：（程序循环、数组等）</li></ul><p>常用三级两层存储系统：</p><ul><li>Cache-主存存储系统</li><li>主存-副存存储系统</li></ul><h3 id="存储器的其他分类方式" tabindex="-1"><a class="header-anchor" href="#存储器的其他分类方式"><span>存储器的其他分类方式</span></a></h3><ol><li>随机存取存储器RAM:<br> CPU对任何一个存储单元的读写时间是一样的**（存取时间使相同的）**</li><li>只读存储器ROM</li><li>顺序存储器SAM：存取时间与信息在存储体的物理位置有关</li><li>直接存取存储器DAM</li></ol><p>存储介质分类：（了解）</p><ol><li>磁芯</li></ol><h2 id="主存储器" tabindex="-1"><a class="header-anchor" href="#主存储器"><span>主存储器</span></a></h2><ul><li>核心，用来存放计算机运行器件所需要的程序和数据，CPU可直接随机地对它进行访问</li></ul><h3 id="主存储器的组织" tabindex="-1"><a class="header-anchor" href="#主存储器的组织"><span>主存储器的组织</span></a></h3><ul><li>存储体：</li><li>地址译码驱动电路：译码器+驱动器</li><li>I/O和读写电路：读写放大器+</li></ul><h3 id="主存储器的存储单元" tabindex="-1"><a class="header-anchor" href="#主存储器的存储单元"><span>主存储器的存储单元</span></a></h3><ul><li><p>位</p></li><li><p>存储字</p></li><li><p>存储单元/主存单元</p></li><li><p>存储体</p></li><li><p>存储单元是CPU对主存可访问操作的最小存储单位</p></li></ul><h3 id="大端方案-小端方案" tabindex="-1"><a class="header-anchor" href="#大端方案-小端方案"><span>大端方案+小端方案</span></a></h3><h3 id="主存储器的主要技术指标" tabindex="-1"><a class="header-anchor" href="#主存储器的主要技术指标"><span>主存储器的主要技术指标</span></a></h3><ol><li><p>存储容量：主存所能容纳的二进制信息总量</p></li><li><p>存取速度 a. 存取时间T_{a}:从启动一次存储器操作到完成该操作所经历的时间 b. 存取周期T_{m}</p></li><li><p>主存带宽 Bm Bm=主存等效工作频率*主存位宽/8 = 内存时钟频率*倍增系数*主存位数/8</p><p>如何改进？</p><ul><li>缩短存取周期</li><li>增加存储字长</li></ul></li></ol><h3 id="数据在主存的存放" tabindex="-1"><a class="header-anchor" href="#数据在主存的存放"><span>数据在主存的存放</span></a></h3><p>字节8、半字16、单字32、双子64</p><ol><li>不浪费存储器资源的存放方法</li></ol><ul><li>优点：不浪费宝贵的主存资源</li><li>缺点：工作效率降低</li></ul><ol start="2"><li>从存储字的起始位置开始存放方法</li></ol><ul><li>优点：一个周期内完成</li><li>缺点：浪费资源</li></ul><ol start="3"><li>边界对齐的数据存放方法</li></ol><ul><li>双字地址的最末三个二进制必须为000，</li><li>单字地址的最末两位必须为00</li><li>半字地址的最末一位必须为0</li></ul><h3 id="半导体" tabindex="-1"><a class="header-anchor" href="#半导体"><span>半导体</span></a></h3><h2 id="虚拟存储器-不考" tabindex="-1"><a class="header-anchor" href="#虚拟存储器-不考"><span>虚拟存储器（不考）</span></a></h2><h2 id="层次结构" tabindex="-1"><a class="header-anchor" href="#层次结构"><span>层次结构</span></a></h2><h2 id="半导体随机存取存储器" tabindex="-1"><a class="header-anchor" href="#半导体随机存取存储器"><span>半导体随机存取存储器</span></a></h2><ul><li>主存储器通常分为ROM和RAM</li><li>静态</li><li>动态</li></ul><h3 id="sram芯片-intel-2114" tabindex="-1"><a class="header-anchor" href="#sram芯片-intel-2114"><span>SRAM芯片 Intel 2114</span></a></h3><p>1k存储单元 4类</p><ul><li>10条地址线</li><li>数据线4个</li><li>控制端</li></ul><h3 id="dram-了解就行" tabindex="-1"><a class="header-anchor" href="#dram-了解就行"><span>DRAM(了解就行)</span></a></h3><h2 id="dram的刷新-会考" tabindex="-1"><a class="header-anchor" href="#dram的刷新-会考"><span>DRAM的刷新（会考）</span></a></h2><ul><li>为了维持MOS型动态记忆单元的存储信息</li></ul><h3 id="刷新和重写-再生-是两个完全不同的概念" tabindex="-1"><a class="header-anchor" href="#刷新和重写-再生-是两个完全不同的概念"><span>刷新和重写（再生）是两个完全不同的概念</span></a></h3><ul><li><p>重写是随机的：破坏性读出之后才重写</p></li><li><p>刷新是定时的：（刷新相当于充电，读写相当于打电话）</p></li><li><p>刷新按行进行（常见的刷新方式有集中式、分散式、异步式）</p></li><li><p>集中式：（疯狂刷抖音，晚上充电，隔天继续），安排若干个刷新周期（充电时间），刷新时停止读写操作 刷新时间=存储体矩阵行数*刷新周期</p><ul><li>缺点：充电时不能玩手机</li></ul></li><li><p>分散式： 刷新操作分散到每个存取周期内进行（刷几条抖音充一次电）</p></li><li><p>异步式： （玩一会儿手机充几分钟电，充分利用时间） 两种方式结合，充分利用 相邻两行的刷新间隔</p></li><li><p>最大刷新间隔2ms</p></li></ul><h3 id="例题" tabindex="-1"><a class="header-anchor" href="#例题"><span>例题</span></a></h3><h3 id="mos型dram刷新控制要点" tabindex="-1"><a class="header-anchor" href="#mos型dram刷新控制要点"><span>MOS型DRAM刷新控制要点</span></a></h3><h2 id="主存设计" tabindex="-1"><a class="header-anchor" href="#主存设计"><span>主存设计</span></a></h2><p>三个问题：芯片的选用、片内地址分配与片选逻辑、信号线的连接</p><h3 id="位扩展" tabindex="-1"><a class="header-anchor" href="#位扩展"><span>位扩展</span></a></h3><p>只在位数方向扩展（加大字长），芯片的字数和存储器的字数时一致的</p><h3 id="字扩展" tabindex="-1"><a class="header-anchor" href="#字扩展"><span>字扩展</span></a></h3><p>仅在字数方向扩展，而位数不变 地址分配：在同一时间内四个芯片中只能有一个芯片被选中</p><h3 id="字和位同时扩展" tabindex="-1"><a class="header-anchor" href="#字和位同时扩展"><span>字和位同时扩展</span></a></h3><h2 id="地址译码方式与片选" tabindex="-1"><a class="header-anchor" href="#地址译码方式与片选"><span>地址译码方式与片选</span></a></h2><p>高位选片，低位选字</p><h3 id="片选信号" tabindex="-1"><a class="header-anchor" href="#片选信号"><span>片选信号</span></a></h3><ol><li><p>线选法</p></li><li><p>全译码器（常用）</p></li><li><p>部分译码 片内寻址外的高位地址的一部分来译码产生片选信号</p></li></ol><h2 id="提高存储系统性能的技术" tabindex="-1"><a class="header-anchor" href="#提高存储系统性能的技术"><span>提高存储系统性能的技术</span></a></h2><ul><li><p>双端口存储器：同一个存储器具有两组独立的读写控制线路</p></li><li><p>并行主存储器（多体交叉存储器）：目标是在位价格基本不变的情况下，使主存频宽</p></li><li><p>单体多字存储器： $$ B_{M}=n*W/T_{M}$$</p></li><li><p>多体单字交叉访问存储器 高位交叉：扩大存储器容量 地位交叉：提高存储器访问速度（流水线方式）</p></li></ul><h2 id="_5-7-cache基本结构和工作原理" tabindex="-1"><a class="header-anchor" href="#_5-7-cache基本结构和工作原理"><span>5.7 Cache基本结构和工作原理</span></a></h2><p>Cache加速：处于CPU和主存之间的东西 如果cache没有就去主存找数据，if cache未满将数据装入Cache，if满了替换数据</p><p>IF 命中 else 没命中 更新cache if cache 满 替换 else 不满 则 装</p><p>Cache工作原理：读取</p><ul><li>将CPU给出的主存地址变换为Cache地址，搜索Cache</li></ul><p>在Cache中找到命中：访问Cache,向CPU返回Cache中的数据副本 在cache中未找到：1. 从主存中读取数据块 2. 等待... 3. 向CPU返回数据，更新Cache</p><p>Cache的工作原理：写入</p><ul><li>将CPU给出的主存地址变换为Cache地址，搜索Cache</li><li>在Cache中命中：写Cache,写主存（存在一致性问题）</li><li>if没有命中：写主存（与cache无关）</li></ul><p>为了保持Cache与主存的内容一致可以采取以下方法：</p><ul><li>写直达法</li><li>写回法</li></ul><h3 id="cache系统3个问题" tabindex="-1"><a class="header-anchor" href="#cache系统3个问题"><span>Cache系统3个问题：</span></a></h3><ol><li><h2 id="定位问题" tabindex="-1"><a class="header-anchor" href="#定位问题"><span>定位问题</span></a></h2></li><li>替换问题</li><li>数据一致性问题</li></ol><h3 id="地址映像规则与地址变换" tabindex="-1"><a class="header-anchor" href="#地址映像规则与地址变换"><span>地址映像规则与地址变换</span></a></h3><p>地址映像： 判断cache有无命中</p><p>当cache的主存的字节数以及块数和块内字节数都是2的幂次时，地址好划分</p><p>块冲突：主存中的块要调入Cache中的某个位置，但该位置已经被其他主存块所占用</p><ol><li>全相联映像与变换</li><li>直接映像与变换</li><li>组相联映像</li></ol><p>全相联映像规则与变换 映像规则：主存中的任何一块都可以装入到cache中的任意一个块的位置</p><ul><li>优点： <ul><li>块冲突概率最低</li><li>cache空间利用率最高</li></ul></li><li>缺点： <ul><li>慢</li></ul></li></ul><p>直接映像规则与变换 映像规则：主存中的每一块只能装入到cache内唯一一个指定的块位置 设：cache块号b=（主存块号B）mod(Cache块数) 一个cache块对应多个主存块</p><ul><li>优点： <ul><li>硬件简单，成本低</li></ul></li><li>缺点：</li></ul><p>组相联映像规则与变换（前面2个结合起来）（考试考这种） 映像规则：主存中的每一块可以被装入到cache中唯一一组中的任何一个位置 cache地址：|组号g位|块号s位|块内地址| 组内块数s-相联度 每组有s块</p><p>当s=cache块数，组相联变成全相联 当s=1，组相联变成直接相连 s大，冲突少，地址变换复杂 s小，冲突多，地址变换容易</p><p>优点：</p><ul><li>块冲突概率比直接映像低</li><li>cache空间利用率</li></ul><h2 id="_3-3-高速缓冲存储器" tabindex="-1"><a class="header-anchor" href="#_3-3-高速缓冲存储器"><span>3.3 高速缓冲存储器</span></a></h2><p>将cache分组set，主存不分组 相联映像规则与变换 映像规则：cache组号=主存区内块号mod组数，组内任意块</p><p>例题：（注意逻辑关系） 组相联</p><ul><li>抄</li></ul><h3 id="替换算法与实现" tabindex="-1"><a class="header-anchor" href="#替换算法与实现"><span>替换算法与实现</span></a></h3><p>所要解决的问题：</p><p>典型算法：</p><ol><li>随机算法</li><li>FIFO算法</li><li>LRU算法</li></ol><p>写策略-写直达法：数据同时写入cache和主存 写回法：数据只写入cache，替换时才写入主存</p><h3 id="cache的平均访问时间计算" tabindex="-1"><a class="header-anchor" href="#cache的平均访问时间计算"><span>cache的平均访问时间计算</span></a></h3><ol><li>贯通查找式 look-through <ul><li>CPU首先向cache发读命令和地址</li><li>cache命中，则从cache中读出数据</li><li>cache未命中，</li></ul></li><li>旁路式 look-aside <ul><li>CPU同时向cache和主存发出读命令和地址</li></ul></li></ol><h3 id="cache命中率计算-考" tabindex="-1"><a class="header-anchor" href="#cache命中率计算-考"><span>cache命中率计算（考）</span></a></h3><p>例题： 概率公式 （理解就会了！）</p><h3 id="虚拟存储器-带过" tabindex="-1"><a class="header-anchor" href="#虚拟存储器-带过"><span>虚拟存储器（带过）</span></a></h3><ul><li>由主存储器和联机工作....</li></ul>',96)]))}const r=a(c,[["render",n],["__file","4_存储系统.html.vue"]]),d=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4_%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F.html","title":"4 存储系统","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"存储访问的局部性原理","slug":"存储访问的局部性原理","link":"#存储访问的局部性原理","children":[{"level":3,"title":"存储器的其他分类方式","slug":"存储器的其他分类方式","link":"#存储器的其他分类方式","children":[]}]},{"level":2,"title":"主存储器","slug":"主存储器","link":"#主存储器","children":[{"level":3,"title":"主存储器的组织","slug":"主存储器的组织","link":"#主存储器的组织","children":[]},{"level":3,"title":"主存储器的存储单元","slug":"主存储器的存储单元","link":"#主存储器的存储单元","children":[]},{"level":3,"title":"大端方案+小端方案","slug":"大端方案-小端方案","link":"#大端方案-小端方案","children":[]},{"level":3,"title":"主存储器的主要技术指标","slug":"主存储器的主要技术指标","link":"#主存储器的主要技术指标","children":[]},{"level":3,"title":"数据在主存的存放","slug":"数据在主存的存放","link":"#数据在主存的存放","children":[]},{"level":3,"title":"半导体","slug":"半导体","link":"#半导体","children":[]}]},{"level":2,"title":"虚拟存储器（不考）","slug":"虚拟存储器-不考","link":"#虚拟存储器-不考","children":[]},{"level":2,"title":"层次结构","slug":"层次结构","link":"#层次结构","children":[]},{"level":2,"title":"半导体随机存取存储器","slug":"半导体随机存取存储器","link":"#半导体随机存取存储器","children":[{"level":3,"title":"SRAM芯片 Intel 2114","slug":"sram芯片-intel-2114","link":"#sram芯片-intel-2114","children":[]},{"level":3,"title":"DRAM(了解就行)","slug":"dram-了解就行","link":"#dram-了解就行","children":[]}]},{"level":2,"title":"DRAM的刷新（会考）","slug":"dram的刷新-会考","link":"#dram的刷新-会考","children":[{"level":3,"title":"刷新和重写（再生）是两个完全不同的概念","slug":"刷新和重写-再生-是两个完全不同的概念","link":"#刷新和重写-再生-是两个完全不同的概念","children":[]},{"level":3,"title":"例题","slug":"例题","link":"#例题","children":[]},{"level":3,"title":"MOS型DRAM刷新控制要点","slug":"mos型dram刷新控制要点","link":"#mos型dram刷新控制要点","children":[]}]},{"level":2,"title":"主存设计","slug":"主存设计","link":"#主存设计","children":[{"level":3,"title":"位扩展","slug":"位扩展","link":"#位扩展","children":[]},{"level":3,"title":"字扩展","slug":"字扩展","link":"#字扩展","children":[]},{"level":3,"title":"字和位同时扩展","slug":"字和位同时扩展","link":"#字和位同时扩展","children":[]}]},{"level":2,"title":"地址译码方式与片选","slug":"地址译码方式与片选","link":"#地址译码方式与片选","children":[{"level":3,"title":"片选信号","slug":"片选信号","link":"#片选信号","children":[]}]},{"level":2,"title":"提高存储系统性能的技术","slug":"提高存储系统性能的技术","link":"#提高存储系统性能的技术","children":[]},{"level":2,"title":"5.7 Cache基本结构和工作原理","slug":"_5-7-cache基本结构和工作原理","link":"#_5-7-cache基本结构和工作原理","children":[{"level":3,"title":"Cache系统3个问题：","slug":"cache系统3个问题","link":"#cache系统3个问题","children":[]},{"level":3,"title":"地址映像规则与地址变换","slug":"地址映像规则与地址变换","link":"#地址映像规则与地址变换","children":[]}]},{"level":2,"title":"3.3 高速缓冲存储器","slug":"_3-3-高速缓冲存储器","link":"#_3-3-高速缓冲存储器","children":[{"level":3,"title":"替换算法与实现","slug":"替换算法与实现","link":"#替换算法与实现","children":[]},{"level":3,"title":"cache的平均访问时间计算","slug":"cache的平均访问时间计算","link":"#cache的平均访问时间计算","children":[]},{"level":3,"title":"cache命中率计算（考）","slug":"cache命中率计算-考","link":"#cache命中率计算-考","children":[]},{"level":3,"title":"虚拟存储器（带过）","slug":"虚拟存储器-带过","link":"#虚拟存储器-带过","children":[]}]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"计算机组成原理/4_存储系统.md"}');export{r as comp,d as data};
