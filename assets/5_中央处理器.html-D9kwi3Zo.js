import{_ as i,c as e,a,o as p}from"./app-C6qutNXP.js";const t={};function n(o,l){return p(),e("div",null,l[0]||(l[0]=[a('<h1 id="_5-中央处理器-cpu" tabindex="-1"><a class="header-anchor" href="#_5-中央处理器-cpu"><span>5 中央处理器 cpu</span></a></h1><ul><li>计算机的核心</li><li>包括运算器和控制器</li></ul><h2 id="_5-1-中央处理器的功能和组成" tabindex="-1"><a class="header-anchor" href="#_5-1-中央处理器的功能和组成"><span>5.1 中央处理器的功能和组成</span></a></h2><p>CPU主要功能：</p><ol><li>控制指令的执行顺序</li><li>产生控制信号控制部件工作</li><li>控制各部操作的时序</li><li>数据处理：算术和逻辑运算</li></ol><p>CPU的组成从硬件设计的角度：</p><p>CPU寄存器：通用、专用</p><ol><li>通用寄存器：</li><li>专用寄存器： 至少5个： <ul><li>程序计数器PC/指令计数器IR/存储器地址寄存器MAR/存储器数据寄存器MDR/状态标志寄存器PSWR</li></ul></li></ol><p>PC-&gt;MAR-&gt;主存（地址线） 主存-&gt;MAR(数据线：间接寻址) 主存-&gt;MDR(数据线：数据地址) MDR-&gt;IR() 指令=操作码+地址码</p><p>状态标志寄存器PSWR: ??</p><h2 id="_5-2-控制器的组成和实现方法" tabindex="-1"><a class="header-anchor" href="#_5-2-控制器的组成和实现方法"><span>5.2 控制器的组成和实现方法</span></a></h2><p>控制器是指挥中心</p><ol><li>指令部件 <ol><li>程序计数器PC</li><li>指令寄存器IR</li><li>指令译码器ID</li><li>地址形成部件</li></ol></li><li>时序部件 <ol><li>脉冲源</li><li>启停控制逻辑</li><li>节拍信号发生器</li></ol></li><li>微操作信号发生器</li><li>中断控制逻辑</li></ol><p>控制器的输入是机器指令代码 输出是微操作控制信号</p><p>常见的微操作信号发生器实现方式：</p><ul><li>组内逻辑器</li><li>存储逻辑型</li><li>组合逻辑与</li></ul><p>控制器的硬件实现方法：</p><ol><li>存储</li><li>存储逻辑性：每条指令</li></ol><h2 id="_5-3-时序系统与控制方式" tabindex="-1"><a class="header-anchor" href="#_5-3-时序系统与控制方式"><span>5.3 时序系统与控制方式</span></a></h2><p>时序系统是控制器的心脏</p><ol><li><p>指令周期和机器周期 指令周期是指取指令、分析指令到执行完该指令所需的全部时间。 指令周期=i*机器周期</p></li><li><p>节拍 一个机器周期内，要完成若干个微操作 节拍的宽度取决于CPU完成一次基本操作的时间 节拍选取一般有几种方法：</p><ol><li>统一节拍法：定长CPU周期</li><li>分散节拍法：不定长CPU周期</li><li>延长节拍法：</li><li>时钟周期插入</li></ol></li><li><p>工作脉冲</p></li><li><p>多级时序系统</p></li></ol><p>时序系统概念图！</p><p>CPU各部件之间的控制方式</p><ol><li>同步控制方式：集中控制方式或中央控制方式</li><li>异步控制方式：分散控制方式或局部控制方式</li></ol><p>指令执行的基本过程</p><ol><li>取指令阶段：将线性指令从主存中取出来并送到指令寄存器中去，所有指令均有（公共操作） <ol><li>PC-&gt;MAR\\</li><li>Read\\</li><li>M(MAR)-&gt;MDR\\</li><li>(MDR)-&gt;IR\\</li><li>(PC)+1-&gt;PC</li></ol></li><li>分析取数阶段 指令译码器ID</li><li>执行阶段</li></ol><h3 id="指令的微操作序列" tabindex="-1"><a class="header-anchor" href="#指令的微操作序列"><span>指令的微操作序列</span></a></h3><p>不同的数据通路就有不同的微操作序列</p><ol><li><p>加法指令ADD @R0,R1</p><p>取指令阶段的公共操作： 1.</p><ol start="2"><li><p>取数周期： $R_{0out}$和$MAR_{in}$有效</p></li><li><p>执行周期： 转移指令</p></li></ol></li></ol><h3 id="微程序控制原理" tabindex="-1"><a class="header-anchor" href="#微程序控制原理"><span>微程序控制原理</span></a></h3><p>微程序设计技术的实质是将程序设计和存储技术相结合 基本术语</p><ol><li>微命令和微操作 微命令和微操作是一一对应的。微命令是微操作的控制信号</li><li>微指令、微地址</li><li>微周期</li><li>微程序：一条机器指令对应于一段微程序</li></ol><ul><li>微程序和程序两个不同的概念</li></ul><p>一条微指令通常至少包含两大部分信息：</p><ol><li>操作控制字段</li><li>顺序控制字段</li></ol><p>微指令编码法</p><ol><li>直接控制法（不译码法） 1：有效 0：无效 并行性强，快，指令字太长</li><li>最短编码法 微指令字长最短 L&gt;=log2N</li><li>字段编码法</li></ol><h2 id="指令流水线" tabindex="-1"><a class="header-anchor" href="#指令流水线"><span>指令流水线</span></a></h2>',38)]))}const h=i(t,[["render",n],["__file","5_中央处理器.html.vue"]]),r=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5_%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8.html","title":"5 中央处理器 cpu","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"5.1 中央处理器的功能和组成","slug":"_5-1-中央处理器的功能和组成","link":"#_5-1-中央处理器的功能和组成","children":[]},{"level":2,"title":"5.2 控制器的组成和实现方法","slug":"_5-2-控制器的组成和实现方法","link":"#_5-2-控制器的组成和实现方法","children":[]},{"level":2,"title":"5.3 时序系统与控制方式","slug":"_5-3-时序系统与控制方式","link":"#_5-3-时序系统与控制方式","children":[{"level":3,"title":"指令的微操作序列","slug":"指令的微操作序列","link":"#指令的微操作序列","children":[]},{"level":3,"title":"微程序控制原理","slug":"微程序控制原理","link":"#微程序控制原理","children":[]}]},{"level":2,"title":"指令流水线","slug":"指令流水线","link":"#指令流水线","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"计算机组成原理/5_中央处理器.md"}');export{h as comp,r as data};
